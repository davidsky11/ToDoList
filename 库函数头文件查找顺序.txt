Linux 库函数头文件查找顺序

=====================================================================================

1、库及头文件的查找？
2、命令的查找？
3、动态链接库的查找？

=====================================================================================
####################		库及头文件的查找			####################
=====================================================================================


1.1、程序在编译时，源码所需要的库及头文件编译器是如何去查找的？


在这里，其实有库的查找，和头文件的查找，下面先来讲头文件的查找。我们在写一个比较大型的程序时，总是喜欢把这些函数还有一些数据结构的声明放在一个文件中，我们把这种文件称为头文件，文件名以.h后缀结尾。在一些源文件里，我们可能要包含自己写的头文件，还有一些标准库的头文件比如说stdio.h等等。在编译的预处理阶段，预处理程序会将这些头文件的内容插到相应的include指令处，现在的问题是编译器是如何找到这些头文件的。

（1）在编译时，我们可以用-I选项来指定头文件所在的目录，如：

    注：在-I后可以有空格也可以没有空格，另外也可以指定多个目录。

（2）设置gcc的环境变量C_INCLUDE_PATH、CPLUS_INCLUDE_PATH 、CPATH。

    C_INCLUDE_PATH编译 C 程序时使用该环境变量。该环境变量指定一个或多个目录名列表，查找头文件，就好像在命令行中指定 -isystem 选项一样。会首先查找 -isystem 指定的所有目录。

    CPLUS_INCLUDE_PATH编译 C++ 程序时使用该环境变量。该环境变量指定一个或多个目录名列表，查找头文件，就好像在命令行中指定 -isystem 选项一样。会首先查找 -isystem 指定的所有目录。

    CPATH 编译 C 、 C++ 和 Objective-C 程序时使用该环境变量。该环 境变量指定一个或多个目录名列表，查找头文件，就好像在命令行中指定-l 选项一样。会首先查找-l 指定的所有目录。

（3）查找默认的路径：/usr/include、/usr/local/include等。


=====================================================================================

总结一下gcc在编译源码时是如何查找所需要的头文件的：

<1>. 首先gcc会从-ldir -isystem dir -Bprefix -sysroot dir --sysroot=dir -iquote dir选项指定的路径查找（这些选项先指定的会先搜索，特例除外）

<2>. 然后查找gcc的环境变量：C_INCLUDE_PATH、CPLUS_INCLUDE_PATH 、CPATH、GCC_EXEC_PREFIX等。（这些环境变量搜索的先后顺序不确定，有待确认）

<3>. 然后查找gcc安装的目录（可以通过gcc -print-search-dirs查询）

<4>. 然后再安装下面列出的顺序查找系统默认的目录：/usr/include、/usr/local/include


=====================================================================================


1.2、程序在编译时，编译器如何查找所需要的库？


这里的库既包括静态库又包括动态库。在这里，我们要先了解两个概念：库的链接时路径和运行时路径。

现代连接器在处理动态库时将链接时路径（Link-time path）和运行时路径（Run-time path）分开，用户可以通过-L指定连接时库的路径，通过-R（或-rpath）指定程序运行时库的路径，大大提高了库应用的灵活性。

补充：
    Linux下的库文件在命名时有一个约定，那就是库文件应该以lib三个字母开头，由于所有的库文件都遵循了同样的规范，因此在用-L选项指定链接的库文件名时可以省去lib三个字母，也就是说gcc在对-lfoo进行处理时，会自动去链接名为libfoo.so的文件。

    每个共享库都有一个特定的so名，其组成如下：
	lib	+	库名	+	.so	+	.version
	 |		 |		 |__________________|
	前缀		库名			后缀
   
    注：在文件系统中，so名时一个指向实名的符号链接。

    每个共享库也有一个实名，其真正包含有库的代码，组成如下：
	so名+.+子版本号+.+发布号（最后的句点和发布号时可选项。）

    另外，共享库还有一个名称，一般用于编译连接，称为连名（linkername），它可以被可做事没有任何版本号的so名。



=====================================================================================


在上面的讨论中，一直以动态库（或者说共享库）为例，其实对于静态库也一样，只是在这里又有一个问题，如果在同一个目录下既有动态库，又有静态库，且他们的文件名一样，只是后缀不一样，那链接器在链接时时链接动态库还是链接静态库呢？如果要指定链接动态库或者静态库有该如何做呢？


程序在编译链接时，编译器时按照如下顺序来查找动态链接库（共享库）和静态链接库的：

<1>. gcc会先按照-Ldir -Bprefix 选项指定的路径查找

<2>. 再找gcc的环境变量GCC_EXEC_PREFIX

<3>. 再找gcc的环境变量LIBRARY_PATH

<4>. 然后查找gcc安装目录（可以通过gcc -print-search-dirs查询）

<5>. 然后查找默认路径/lib

<6>. 然后查找默认路径/usr/lib

<7>. 最后查找默认路径/usr/local/lib

<8>. 在同一个目录下，如果有相同文件名的库（只是后缀不同），那么默认链接的动态链接库，可以用-static选项显式指定链接静态库。



=====================================================================================
####################		命令的查找			####################
=====================================================================================


2、当输入一个命令时，系统时如何找到这个命令的？

如果输入一个命令时带入路径时一般是不会有什么疑问的，因为此时我们执行的就是指定路径下的程序。那当我们只输入一个命令名时会发生什么情况呢？

当我们键入命令名时，Linux 系统更确切的说应该时shell安装如下顺序搜索：

<1>. Shell首先检查命令是不是保留字（比如for、do等）

<2>. 如果不是保留字，并且不再引号中，Shell接着检查别名表，如果找到匹配则进行替换，如果别名定义以空格结尾，则对下一个词作别名替换，接着把替换的结果再跟保留字表比较，如果不是保留字，则Shell 转入第3步

<3>. 然后，Shell 在函数表中查找该命令，如果找到则执行

<4>. 接着Shell 再检查该命令是不是内部命令（比如cd、pwd）

<5>. 最后Shell 在PATH中搜索以确定命令的位置

<6>. 如果还是找不到命令则产生"command not found"错误信息。

注：系统在按PATH 变量定义的路径搜素文件时，先搜到的命令先执行。



=====================================================================================
####################		动态链接库的查找			####################
=====================================================================================


3、程序在运行时，它所需要的库去哪找？

在这里没有提到头文件的查找，因为头文件只在编译的时候才会用到，编译完后就不需要头文件了。另外，这里的库值的时动态链接库，静态链接库在链接完后是不需要的，因为链接时链接器会把静态库中的代码插入到相应的函数的调用处，所以程序在运行时不再需要静态库，而对于动态库来说，链接时，并没有将动态库中的任何代码或数据拷贝到可执行文件中，而只是拷贝了一些重定位与符号表信息。所以程序在运行时才需要链接时所使用的动态链接库以执行动态链接库中的代码。

程序运行时动态库的搜索路径搜索的先后顺序时：

<1>. 编译目标代码时指定的动态库搜索路径（指的是用-Wl，rpath或-R选项而不是-L）
    例如：gcc -Wl, -rpath, /home/***/test, -rpath, /lib/, -rpath, /usr/lib/ test.c

<2>. 环境变量LD_LIBRARY_PATH 指定的动态库搜索路径

<3>. 配置文件/etc/ld.so.conf 中指定的动态库搜索路径

<4>. 默认的动态库搜索路径/lib

<5>. 默认的动态库搜素路径/usr/lib

在上述1、2、3指定动态库搜索路径时，都可指定多个动态库搜索路径，其搜索的先后顺序时按指定路径的先后顺序搜索的。

注：
（1）gcc的-Wl,rpath选项可以设置动态库所在路径，也就是编译生成的该程序在运行时将到-Wl,rpath所指定的路径下去寻找动态库，如果没找到则到其它地方去找，并且这个路径会直接写在elf文件(就是生成的可执行文件)中，这样可以免去设置LD_LIBRARY_PATH。注意，gcc参数设定时-Wl,rpath,/path/to/lib, 中间不能有空格。
（2）更改/etc/ld.so.conf 文件后一定要执行命令：ldconfig。该命令将/etc/ld.so.conf 文件中所有路径下的库载入内存中。




========================================================================================


下面对编译时库的查找与运行时库的查找做一个简单的比较：

1. 编译时查找的是静态库或动态库，而运行时，查找的只是动态库。

2. 编译时可以用-L指定查找路径，或者用环境变量LIBRARY_PATH，而运行时可以用-Wl,rpath或-R选项，或者修改/etc/ld.so.conf文件或者设置环境变量LD_LIBRARY_PATH.

3. 编译时用的链接器是ld，而运行时用的链接器是/lib/ld-linux.so.2.

4. 编译时与运行时都会查找默认路径：/lib  /usr/lib

5. 编译时还有一个默认路径：/usr/local/lib，而运行时不会默认查找该路径。

如果安装的包或程序没有放在默认的路径下，则使用man command 查找 command的帮组时可能查不到，这时可以修改MANPATH环境变量，或者修改/etc/manpath.config文件。如果使用了pkg-config这个程序来对包进行管理，那么有可能要设置PKG_CONFIG_PATH环境变量。



================================================================================================


写在最后的话

    一个程序的从生到死会发生很多很多的故事，在这里，我只是从一个角度探讨了其中的冰山一角，还有许许多多的问题需要去理解，比如说：编译链接时，各个文件是如何链接到一起的？程序运行时，动态库已经被加载到内存中，程序又是如何准确找到动态库在内存中的位置的？动态库的链接器/lib/ld-linux.so.2自己本身也是一个动态库，那么它又是如何被载入内存的呢？更深入的想一下，可以认为ld-linux.so.2是随内核一起载入内存的，那内核又是如何载入内存的呢？如果说内核是由bootloader载入的，那bootloader又是如何载入内存的呢？也许你该想到BIOS了。其中的一些问题可以参考《深入理解计算机系统》这本书。